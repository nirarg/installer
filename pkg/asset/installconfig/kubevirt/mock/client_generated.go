// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/storage/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetNamespace mocks base method
func (m *MockClient) GetNamespace(ctx context.Context, name string) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", ctx, name)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockClientMockRecorder) GetNamespace(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockClient)(nil).GetNamespace), ctx, name)
}

// ListNamespace mocks base method
func (m *MockClient) ListNamespace(ctx context.Context) (*v1.NamespaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespace", ctx)
	ret0, _ := ret[0].(*v1.NamespaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespace indicates an expected call of ListNamespace
func (mr *MockClientMockRecorder) ListNamespace(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespace", reflect.TypeOf((*MockClient)(nil).ListNamespace), ctx)
}

// GetStorageClass mocks base method
func (m *MockClient) GetStorageClass(ctx context.Context, name string) (*v10.StorageClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageClass", ctx, name)
	ret0, _ := ret[0].(*v10.StorageClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageClass indicates an expected call of GetStorageClass
func (mr *MockClientMockRecorder) GetStorageClass(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageClass", reflect.TypeOf((*MockClient)(nil).GetStorageClass), ctx, name)
}

// GetNetworkAttachmentDefinition mocks base method
func (m *MockClient) GetNetworkAttachmentDefinition(ctx context.Context, name, namespace string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAttachmentDefinition", ctx, name, namespace)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAttachmentDefinition indicates an expected call of GetNetworkAttachmentDefinition
func (mr *MockClientMockRecorder) GetNetworkAttachmentDefinition(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAttachmentDefinition", reflect.TypeOf((*MockClient)(nil).GetNetworkAttachmentDefinition), ctx, name, namespace)
}

// DeleteVirtualMachine mocks base method
func (m *MockClient) DeleteVirtualMachine(namespace, name string, wait bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachine", namespace, name, wait)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachine indicates an expected call of DeleteVirtualMachine
func (mr *MockClientMockRecorder) DeleteVirtualMachine(namespace, name, wait interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachine", reflect.TypeOf((*MockClient)(nil).DeleteVirtualMachine), namespace, name, wait)
}

// ListVirtualMachineNames mocks base method
func (m *MockClient) ListVirtualMachineNames(namespace string, requiredLabels map[string]string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineNames", namespace, requiredLabels)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineNames indicates an expected call of ListVirtualMachineNames
func (mr *MockClientMockRecorder) ListVirtualMachineNames(namespace, requiredLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineNames", reflect.TypeOf((*MockClient)(nil).ListVirtualMachineNames), namespace, requiredLabels)
}

// DeleteDataVolume mocks base method
func (m *MockClient) DeleteDataVolume(namespace, name string, wait bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataVolume", namespace, name, wait)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataVolume indicates an expected call of DeleteDataVolume
func (mr *MockClientMockRecorder) DeleteDataVolume(namespace, name, wait interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataVolume", reflect.TypeOf((*MockClient)(nil).DeleteDataVolume), namespace, name, wait)
}

// ListDataVolumeNames mocks base method
func (m *MockClient) ListDataVolumeNames(namespace string, requiredLabels map[string]string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataVolumeNames", namespace, requiredLabels)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataVolumeNames indicates an expected call of ListDataVolumeNames
func (mr *MockClientMockRecorder) ListDataVolumeNames(namespace, requiredLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataVolumeNames", reflect.TypeOf((*MockClient)(nil).ListDataVolumeNames), namespace, requiredLabels)
}

// DeleteSecret mocks base method
func (m *MockClient) DeleteSecret(namespace, name string, wait bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", namespace, name, wait)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret
func (mr *MockClientMockRecorder) DeleteSecret(namespace, name, wait interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockClient)(nil).DeleteSecret), namespace, name, wait)
}

// ListSecretNames mocks base method
func (m *MockClient) ListSecretNames(namespace string, requiredLabels map[string]string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecretNames", namespace, requiredLabels)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecretNames indicates an expected call of ListSecretNames
func (mr *MockClientMockRecorder) ListSecretNames(namespace, requiredLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecretNames", reflect.TypeOf((*MockClient)(nil).ListSecretNames), namespace, requiredLabels)
}
